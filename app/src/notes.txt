//////////////////// Stars ***********************
.priority-container__stars {
        display: flex;
    }

    .priority-container__stars h3 {
        margin: 7px;
        padding: 0;
    }
****************** overlay **********************@@@
.slide-panel__ticket-overlay {
		
		right: 100%;
		width: 3000px;
		top: 0;
		bottom: 0;
		position: absolute;
		background-color: rgba(17, 17, 17, 0.7); 
		/* transition: background .1s ease; */
		/* pointer-events: none; */
		/* display: none; */
	}
window.focus
v-show


<!-- <div class="ticket__container-multiple-input-container">
    <input id="priority-1" name="priority" type="radio"	:value=1 v-model="formData.priority"> 
    <label for="priority-1">1</label>

    <input id="priority-2" name="priority" type="radio"	:value=2 v-model="formData.priority"> 
    <label for="priority-2">2</label>

    <input id="priority-3" name="priority" type="radio"	:value=3 v-model="formData.priority"> 
    <label for="priority-3">3</label>

    <input id="priority-4" name="priority" type="radio" :value=4 v-model="formData.priority"> 
    <label for="priority-4">4</label>

    <input id="priority-5" name="priority" type="radio" :value=5 v-model="formData.priority"> 
    <label for="priority-5">5</label>
</div> -->

<!-- <div v-if="editMode"> -->

// patchProject() {
// 	/* bare hvis withCredentials: true! */

// 	sanity
// 		.patch('a99b7992-0974-4a7e-8ddb-6891f7a6776a')
// 		.set({ year: 2022 })
// 		.commit()
// 		.then(updatedDocument => {
// 			console.log('I just updated document:', updatedDocument);
// 		});
// },

// createProject() {
// 	/* bare hvis withCredentials: true! */

// 	sanity.create({
// 		_type: 'project',
// 		title: 'NEW PROJECT!!!',
// 	});
// },
// createTeam(newTeam) {

// 	// sjekker om eksistere team
// 	const teams = sanity.getItem('team');
// 	const checkExistingTeam = teams.includes(newTeam);
// 	// hvis eksistere return med en gang
// 	if(checkExistingTeam) {
// 		return newTeam;
// 	} else {
// 		sanity.create('team', newTeam)
// 	}
// 	// hvis ikke eksistere
// 	// lager vi ny team i referanse felt
// 	// sÃ¥ returnere vi ny referanse

// 	return newTeam;
// },

// timestamp: new Date().toISOString(),

		// handleSubmit() {		
			// 	sanity.create({
			// 		_type: 'bug',
			// 		title: this.formData.title,
			// 		description: this.formData.description,
			// 		priority: this.formData.priority,
			// 		status: this.formData.status,
			// 		progress: this.formData.progress,
			// 		team: this.createTeam(),
			// 		team: {
			// 			_type: 'reference',
			// 			_ref: this.teamID,
			// 		},
			// 		reporter: this.createReporter(),
			// 		reporter: {
			// 			_type: 'reference',
			// 			_ref: this.reporterID,
			// 		},
			// 		assignee: this.createAssignee(),
			// 		assignee: {
			// 			_type: 'reference',
			// 			_ref: this.assigneeID,
			// 		}
			// 	}).then(result => {
			// 		console.log(`Created book with id: ${result._id}`)
			// 		this.teamID = result._id;
			// 	});
			// },

			// createTeam() {
			// 	const doc = {
			// 		_type: 'team',
			// 		name: this.formData.newTeam,
			// 	}
			// 	sanity.create(doc).then((res) => {
			// 		this.teamID = res._id;
			// 	});
			// },

			// createReporter() {
			// 	const doc = {
			// 		_type: 'person',
			// 		name: this.formData.reporter,
			// 	}
			// 	sanity.create(doc).then((res) => {
			// 		this.reporterID = res._id;
			// 	});
			// },

			// createAssignee() {
			// 	const doc = {
			// 		_type: 'person',
			// 		name: this.formData.assignee,
			// 	}
			// 	sanity.create(doc).then((res) => {
			// 		this.assigneeID = res._id;
			// 	});
			// },
				// existingteams() {
			// 	// Javascript Sets: https://alligator.io/js/sets-introduction/#:~:text=Sets%20are%20a%20new%20object,like%20object%20literals%20or%20arrays.
			// 	this.teams = [ ...new Set(this.result.map(({ team }) => team.name)) ]; 
			// 	console.log(this.teams)
			// },

			// // existingUniqueTeams() {
			// // 	this.uniqueTeams = [ ...new Set(this.teams.map(({ team }) => team.name)) ];
			// // 	console.log(this.uniqueTeams)
			// // },

			// getTeamId() {
			// 	this.teamtest = this.result.find(team =>{
			// 		team.name === this.teamName
			// 	});
			// 	console.log(this.teamtest)
			// }
*[_type == $documentType] | order(date asc) {
    ...,
    assignee-> {
        name,
        image {
            asset-> { 
                url 
            },
            caption,
        },
    },
    
    reporter-> {
        name,
        image {
        asset-> { 
            url 
        },
        caption, 
        } 
    },

    team-> { 
        _id,
        name
    }
}

<template>
	<section>
		<div v-if="loading">...</div> 
		<div v-else class="ticket"> 
			<h1 v-if="!editMode">Create a Ticket for bug</h1>
			<h1 v-else>Update your Ticket</h1>
			
			<div class="ticket__container">
				<form>
					<section>
						<label for="title">Title</label>
						<input id="title" name="title" type="text" v-model="formData.title"/>

						<label for="description">Description</label> 
                    	<textarea id="description" name="description" rows="3" cols="20" type="text" v-model="formData.description"></textarea>

						<label for="team">Team</label>
						<select id="team" name="team" v-model="formData.team">
							<option v-for="team in result" :key="team._id" :value="team.name">{{ `${team.name}` }}</option>
						</select>

						<label for="new-team">New Team</label>
						<input id="new-team" name="new-team" type="text" v-model="formData.team">

						<label for="priority">Priority</label>
						<select id="priority" name="priority" v-model="formData.priority">
							<option value="major">Major</option>
							<option value="low">Low</option>
							<option value="critical">Critical</option>
						</select>

						<div>
							<label for="progress">Progress</label>
							<input type="range" id="progress" name="progress" v-model.number="formData.progress" min="0" max=100>
							
							<label for="status">Status</label>
							<select id="status" name="status" v-model="formData.status">
								<option value="not started">Not started yet</option>
								<option value="working on it">Working on it</option>
								<option value="stuck">Stuck</option>
								<option value="done">Done</option>
							</select>
						</div>

						<input type="submit" @click.prevent="handleSubmit">
					</section>

					<section>
						<label for="reporter">Reporter</label>
						<input id="reporter" name="reporter" type="text" v-model="formData.reporter">

						<label for="reporterImage">Reporter Image</label>
						<input id="reporterImage" name="reporterImage" type="text" v-model="formData.reporterImage">

						<!-- <div class="reporter-image">
							<img v-if="formData.reporterImage" :src="formData.reporterImage" alt="Reporter image">
						</div> -->

						<label for="assignee">Assignee</label>
						<input id="assignee" name="assignee" type="text" v-model="formData.assignee">

						<label for="assigneeImage">Assignee Image</label>
						<input id="assigneeImage" name="assigneeImage" type="text" v-model="formData.assigneeImage">

						<!-- <div class="assignee-image">
							<img v-if="formData.assigneeImage" :src="formData.assigneeImage" alt="Assignee image">
						</div> -->

						<label for="submitDate">Submit Date:</label>
  						<input type="date" id="submitDate" name="submitDate" v-model="formData.submitDate">
					</section>
				</form>
			</div>
		</div>	
	</section>
</template>

<script> 
	import sanity from '../sanity.js';
	import query from '../groq/team.groq?raw';
	import viewMixin from '../mixins/viewMixin.js';
	export default {
		mixins: [viewMixin],

		data() {
			return {
				editMode: false,
				formData: {
					title:'',
					description: '',
					priority: '',
					status: '',
					progress: 0,
					submitDate: '',
					team: '',
					reporter: '',
					assignee: '',
				},
				teamID: '',
				reporterID: '',
				assigneeID: '',
			}
		},

		async created() {
			await this.sanityFetch(query, { 
				type: 'team' 
			});
		},

		methods: {
			handleSubmit() {
				this.teamID = this.result.find(team => team.name === this.formData.team );
				const teamIndex = this.result.findIndex(team => team.name === this.formData.team)
				if(teamIndex === 1) {
					const team = {
						_id: this.teamID._id,
						_type: 'team',
						name: this.formData.team,
					}
					sanity.createIfNotExists(team).then((res) => {
						this.teamID = res._id;

						const reporter = {
							_type: 'person',
							name: this.formData.reporter,
						}
						sanity.create(reporter).then((res) => {
							this.reporterID = res._id;

							const assignee = {
							_type: 'person',
							name: this.formData.assignee,
							}
							sanity.create(assignee).then((res) => {
								this.assigneeID = res._id;
								this.createBug();
							});
						});
					});		
				} else {
					const team = {
						_type: 'team',
						name: this.formData.team,
					}
					sanity.create(team).then((res) => {
						this.teamID = res._id;

						const reporter = {
							_type: 'person',
							name: this.formData.reporter,
						}
						sanity.create(reporter).then((res) => {
							this.reporterID = res._id;

							const assignee = {
							_type: 'person',
							name: this.formData.assignee,
							}
							sanity.create(assignee).then((res) => {
								this.assigneeID = res._id;
								this.createBug();
							});
						});
					});		
				}
					
			},

			createBug() {
				sanity.create({
					_type: 'bug',
					title: this.formData.title,
					description: this.formData.description,
					priority: this.formData.priority,
					status: this.formData.status,
					progress: this.formData.progress,
					submitDate: this.formData.submitDate,
					team: {
						_type: 'reference',
						_ref: this.teamID,
					},
					reporter: {
						_type: 'reference',
						_ref: this.reporterID,
					},
					assignee: {
						_type: 'reference',
						_ref: this.assigneeID,
					}
				})
				
				.then(result => {
					console.log(`Created book with id: ${result._id}`)
				});
			},
		},
	}
</script>

<style>
	.ticket {
		padding: 30px;
		width: 100%;
	}

	.ticket__container {
		width: 100%;
		display: flex;
		justify-content: center;
	}

	.ticket__container form {
		display: flex;
	}

	.ticket__container form section {
		display: flex;
		flex-direction: column;
		margin: 10px;
		width: 500px;
	}

	.ticket__container form label {
		margin: 20px 0 0 0;	
	}

	.ticket__container form select,
	.ticket__container form input {
		padding: 10px;
		font-size: 15px;
		border-radius: 10px;
		border: 1.5px solid rgb(218, 218, 218);
		margin: 5px;
	}

	.ticket__container-multiple-input-container {
		margin: 20px 0 20px 0;
	}
</style>

documentation[] {
		..., asset->{ url }
	}

	// 	handleSubmit() {
		// 		this.teamID = this.result.find(team => team.name === this.formData.team );
		// 		const teamIndex = this.result.findIndex(team => team.name === this.formData.team)
		// 		if(teamIndex === 1) {
		// 			const team = {
		// 				_id: this.teamID._id,
		// 				_type: 'team',
		// 				name: this.formData.team,
		// 			}
		// 			sanity.createIfNotExists(team).then((res) => {
		// 				this.teamID = res._id;

		// 				const reporter = {
		// 					_type: 'person',
		// 					name: this.formData.reporter,
		// 				}
		// 				sanity.create(reporter).then((res) => {
		// 					this.reporterID = res._id;

		// 					const assignee = {
		// 					_type: 'person',
		// 					name: this.formData.assignee,
		// 					}
		// 					sanity.create(assignee).then((res) => {
		// 						this.assigneeID = res._id;
		// 						this.createBug();
		// 					});
		// 				});
		// 			});		
		// 		} else {
		// 			const team = {
		// 				_type: 'team',
		// 				name: this.formData.team,
		// 			}
		// 			sanity.create(team).then((res) => {
		// 				this.teamID = res._id;

		// 				const reporter = {
		// 					_type: 'person',
		// 					name: this.formData.reporter,
		// 				}
		// 				sanity.create(reporter).then((res) => {
		// 					this.reporterID = res._id;

		// 					const assignee = {
		// 					_type: 'person',
		// 					name: this.formData.assignee,
		// 					}
		// 					sanity.create(assignee).then((res) => {
		// 						this.assigneeID = res._id;
		// 						this.createBug();
		// 					});
		// 				});
		// 			});		
		// 		}
					
		// 	},

		// 	createBug() {
		// 		sanity.create({
		// 			_type: 'bug',
		// 			title: this.formData.title,
		// 			description: this.formData.description,
		// 			priority: this.formData.priority,
		// 			status: this.formData.status,
		// 			progress: this.formData.progress,
		// 			submitDate: this.formData.submitDate,
		// 			team: {
		// 				_type: 'reference',
		// 				_ref: this.teamID,
		// 			},
		// 			reporter: {
		// 				_type: 'reference',
		// 				_ref: this.reporterID,
		// 			},
		// 			assignee: {
		// 				_type: 'reference',
		// 				_ref: this.assigneeID,
		// 			}
		// 		})
				
		// 		.then(result => {
		// 			console.log(`Created book with id: ${result._id}`)
		// 		});
		// 	},
		<template>
	<section>
		<div v-if="loading">...</div>
		<div v-else class="dashboard">
			<h1>Bugs Tracker</h1>
			<div class="dashboard__project-container">
				<div v-for="(uniqueProject, index) in uniqueProjects" :key="uniqueProject._id"> 

					<div class="dashboard__project-container-title">
						<div>
							<div class="ticketCard__color" :style="{ backgroundColor: this.colors[index] || this.colors[0] }"></div>
							<div :style="{ color: this.colors[index] || this.colors[0] }">{{ uniqueProject }}</div>
							<div>Reporter</div> 
							<div>Status</div>	
							<div>Priority</div>
							<div>Assignee</div>

							<div class="progress-display">
								<div>
									<div>Progress</div>
								</div>
							</div>

							<div>Due Date</div>
						</div>	
					</div>

					<div v-for="bug in result.filter(bug => bug.project.name === uniqueProject)" :key="bug._id">
						<TicketCard 
							:filteredBug="bug"
							:color="this.colors[index] || this.colors[0]"
						/>	
					</div>	

					<div class="dashboard__project-container-newBug">
						<div>
							<div class="ticketCard__color" :style="{ backgroundColor: this.colors[index] || this.colors[0] }"></div>
							
							<div class="edit">
								<input type="text" v-model="bugData[index]" @keyup.enter="createBug(uniqueProject, index)" placeholder="+ Add Bug">
								<!-- <div @click="createBug(uniqueProject, index)">Add</div> -->
							</div>
							
							<div></div> 
							<div></div>	
							<div></div>
							<div></div>

							<div class="progress-display">
								<div>
            						<div></div>
        						</div>
							</div>
							
							<div></div>
						</div>
					</div>
				</div> 
			</div>
		</div>
	</section>
</template>

<script>
	import sanity from '../sanity.js';
	import query from '../groq/dashboard.groq?raw';
	import projects from '../groq/project.groq?raw';
	import viewMixin from '../mixins/viewMixin.js';
	import TicketCard from '../components/TicketCard.vue';

	export default {
		mixins: [viewMixin],

		data() {
			return {
				results: [],
				uniqueProjects:[],
				edit: false,
				bugData: [],
				projectID: '',
				colors: [
					'rgba(162, 93, 220, 1)',
					'rgba(0, 200, 117, 1)',
					'rgba(253, 172, 61, 1)',
					'rgba(226, 67, 92, 1)',
					'rgba(86, 155, 253, 1)',
				],
			}
		},

		async created() {
			await this.loadBugs();
		},
		
		components: {
			TicketCard,
		},

		methods: {
			async loadBugs() {
				await this.sanityFetch(query, { 
					documentType: 'bug'
				});

				await this.sanityFetchProject(projects, { 
					type: 'project'
				});

				console.log(this.result)

				this.metaTags({
					title: 'Bugs Tracker',
				})
				this.filteredProjects();
			},
			filteredProjects() {
				// Javascript Sets: https://alligator.io/js/sets-introduction/#:~:text=Sets%20are%20a%20new%20object,like%20object%20literals%20or%20arrays.
				this.uniqueProjects = [ ...new Set(this.result.map(({ project }) => project.name)) ]; 
			},	

			createBug(uniqueProject, index) {
				this.projectID = this.projectsResult.find(project => project.name === uniqueProject );
				console.log(this.projectID._id)
				sanity.create({
					_type: 'bug',
					title: this.bugData[index],
					slug: {
						_type: 'slug',
						current: this.bugData[index]
										.toLowerCase()
										.replace(/\s+/g, '-')
										.slice(0, 200),
						},
					project: {
						_type: 'reference',
						_ref: this.projectID._id,
					}
				})
				
				.then(res => {
					console.log(`Created bug with id: ${res._id}`)
					this.loadBugs();
				});
			},
		},	
	}
	
</script>

<style>
	.dashboard {
		padding: 20px;
		width: 100%;
	}

	.dashboard__project-container {
		width: 100%;
		height: 80vh;
		/* overflow: scroll; */
	}

	.dashboard__project-container-title,
	.dashboard__project-container-newBug {
		display: flex;
        width: 90vw;
	}

	.dashboard__project-container-title div {
		margin: 20px 0 0 0;
	}

	.dashboard__project-container-title div,
	.dashboard__project-container-newBug div {
		width: 100%;
		display: flex;
		font-size: 16px;
	}

	.dashboard__project-container-title div > *,
	.dashboard__project-container-newBug div > * {
		background-color: rgb(245, 245, 245);
        margin: 1px;
        padding: 5px;
        width: 100%;
        display: flex;
		justify-content: center;
        align-items: center;	
	}

	.dashboard__project-container-newBug div > * {
		padding: 8px;
	}

	.edit input {
		border: none;
	}
</style>
 getProgress() {
                switch (this.bugProgress) {
                    case 'done':
                        this.progress = 100;
                        break

                    case 'working on it':
                        this.progress = 60;
                        break

                    case 'stuck':
                        this.progress = 40;
                        break

                    default:
                        this.progress = 10;
                }
            },